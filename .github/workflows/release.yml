name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:

  build-windows:
    name: Build Windows EXE
    runs-on: windows-latest
    outputs:
      exe_path: ${{ steps.build.outputs.exe_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install pyinstaller

      - name: Read version file
        id: version
        run: |
          $version = Get-Content project.ver
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Build Windows EXE
        id: build
        run: |
          pyinstaller --noconfirm --onefile --windowed --name pyauto --hidden-import pynput src/pyauto.py
          $exe = Get-ChildItem -Path dist -Filter *.exe | Select-Object -First 1
          echo "exe_path=dist\$($exe.Name)" >> $env:GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: ${{ steps.build.outputs.exe_path }}

  build-linux:
    name: Build Linux Binary
    runs-on: ubuntu-latest
    outputs:
      bin_path: ${{ steps.build.outputs.bin_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install pyinstaller

      - name: Read version file
        id: version
        run: |
          VERSION=$(cat project.ver)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Linux binary
        id: build
        run: |
          pyinstaller --noconfirm --onefile --name pyauto --hidden-import pynput src/pyauto.py
          BIN=$(ls dist/* | head -n 1)
          echo "bin_path=$BIN" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          path: ${{ steps.build.outputs.bin_path }}

  build-mac:
    name: Build macOS App
    runs-on: macos-latest
    outputs:
      app_path: ${{ steps.build.outputs.app_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install pyinstaller

      - name: Read version file
        id: version
        run: |
          VERSION=$(cat project.ver)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build macOS app
        id: build
        run: |
          pyinstaller --noconfirm --onefile --windowed --name PyAuto --hidden-import pynput src/pyauto.py
          cd dist
          zip -r PyAuto.app.zip PyAuto.app
          echo "app_path=dist/PyAuto.app.zip" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: dist/PyAuto.app.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build-windows
      - build-linux
      - build-mac

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Read version
        id: read_version
        run: |
          VERSION=$(cat project.ver)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get last commit message
        id: commit_message
        run: |
          message=$(git log -1 --pretty=%B)
          echo "msg=$message" >> $GITHUB_OUTPUT

      - name: Zip source code
        run: |
          zip -r source_code.zip .

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.read_version.outputs.version }}"
          name: "Release v${{ steps.read_version.outputs.version }}"
          body: ${{ steps.commit_message.outputs.msg }}
          files: |
            artifacts/windows-exe/*.exe
            artifacts/linux-binary/*
            artifacts/macos-app/*
            source_code.zip
